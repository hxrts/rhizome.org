import csv
import datetime
import httplib
import socket
import urllib2

from urllib2 import Request, urlopen, URLError

from django.conf import settings
from django.contrib import admin
from django.core.mail import EmailMessage
from django.core.paginator import Paginator, InvalidPage, EmptyPage
from django.db import IntegrityError
from django.http import HttpResponseRedirect, HttpResponse 
from django.shortcuts import render_to_response 
from django.template import RequestContext

from artbase.forms import AboutArtbaseForm
from artbase.models import *
from support.models import AutoGeneratedEmail

class AboutArtbaseAdmin(admin.ModelAdmin):
    model = AboutArtbase
    form = AboutArtbaseForm
    
admin.site.register(AboutArtbase,AboutArtbaseAdmin)

admin.site.register(ArtbaseDocument)


class AudioAdmin(admin.ModelAdmin):
    list_display  = ('work','id','created')
    raw_id_fields = ('work',)
admin.site.register(Audio,AudioAdmin)

class VideoAdmin(admin.ModelAdmin):
    list_display  = ('work','id','created')
    raw_id_fields = ('work',)
admin.site.register(Video,VideoAdmin)

class ExternalCollectionAdmin(admin.ModelAdmin):
    model = ExternalCollection
    search_fields = ['name',]

admin.site.register(ExternalCollection, ExternalCollectionAdmin)

class ExternalCollectionWorkAdmin(admin.ModelAdmin):
    model = ExternalCollectionWork
    search_fields = ['work__user','work__title','work__byline','collection__name']
    raw_id_fields = ('work','collection')
    list_filter = ('collection',)

admin.site.register(ExternalCollectionWork, ExternalCollectionWorkAdmin)

class ExternalCollectionWorkAdminInline(admin.TabularInline):
        model = ExternalCollectionWork
        
# class TagToWorkAdminInline(generic.GenericTabularInline):
#         model = TaggedItem
      #   formfield_overrides = {
#             models.ImageField: {'widget':TagToWorkWidget},
#         }

#         def formfield_for_dbfield(self, db_field, **kwargs):
#             if db_field.name == 'name':
#                 kwargs['widget'] = MyWidget()
#                 return super(TagToWorkAdminInline,self).formfield_for_dbfield(db_field,**kwargs)

ARTWORKS_SENT_TO_ARTSTOR = [10637, 1717, 2075, 2275, 2533, 28759, 3124, 3387, 44853, 52139, 10669, 1720, 2076, 2291, 2534, 28764, 31334, 33885, 44859, 52155, 11138, 1721, 2077, 2294, 25424, 28765, 3138, 33888, 45626, 52176, 11228, 1722, 2079, 2308, 2545, 2877, 3147, 3402, 4568, 52290, 11368, 1728, 2080, 23208, 2549, 2878, 31515, 3409, 4592, 52337, 11499, 1732, 2081, 23333, 25499, 2881, 3155, 3412, 46189, 52342, 11560, 1734, 2084, 23353, 2555, 2884, 3156, 3413, 46317, 52699, 11564, 1736, 2085, 23486, 2572, 2895, 3157, 3418, 46599, 52701, 11601, 1738, 2086, 23508, 2575, 2898, 3158, 3419, 46677, 52880, 11972, 1739, 2088, 2355, 2590, 28982, 3163, 3435, 46680, 52910, 12214, 17402, 2089, 2357, 2592, 2904, 3172, 34353, 46685, 52952, 12470, 1741, 2114, 2358, 2594, 2909, 3175, 34536, 46733, 53019, 13313, 1744, 2115, 23622, 2608, 29103, 31813, 34581, 46760, 53115, 13318, 1745, 2124, 2366, 26177, 29104, 3184, 3473, 4710, 53193, 13828, 17668, 2127, 23687, 2630, 29242, 31849, 3480, 47655, 53194, 14407, 17778, 2134, 2380, 2633, 2925, 31867, 34959, 47663, 53216, 14427, 17888, 2139, 2390, 2645, 2930, 3195, 35607, 47669, 53270, 14521, 1794, 2143, 2398, 2671, 2931, 3197, 35798, 47686, 53320, 14537, 1821, 2144, 2406, 26739, 2936, 3211, 36255, 47688, 53382, 14827, 1822, 2161, 24114, 2679, 2951, 32161, 36510, 47727, 53409, 15021, 1824, 2176, 2418, 26910, 29511, 32224, 36667, 47728, 53420, 15033, 1825, 2180, 2427, 2706, 29618, 32231, 36806, 47729, 53474, 15552, 1827, 2188, 2433, 2724, 2963, 32305, 37062, 47730, 53493, 15791, 18284, 2192, 2458, 2729, 2967, 32364, 37063, 48005, 53516, 16641, 1830, 2193, 2459, 2732, 29765, 32380, 38421, 48168, 53782, 1678, 1831, 2202, 2460, 2738, 30068, 3239, 39452, 4825, 5631, 1680, 1832, 2203, 2466, 27757, 30160, 3245, 39961, 48416, 6104, 1682, 1833, 2204, 24714, 27821, 3019, 3272, 39993, 48501, 6143, 1684, 1859, 22094, 24715, 27897, 3022, 3282, 40227, 48502, 6313, 1685, 1894, 2219, 2476, 2815, 3024, 32863, 41044, 48554, 6594, 1687, 1903, 2223, 24775, 2821, 3026, 32877, 41083, 48619, 6608, 1690, 1904, 2224, 2487, 2845, 3027, 32925, 41123, 48760, 6889, 1691, 1918, 2226, 2488, 28527, 3030, 32948, 41125, 4937, 7333, 1693, 1930, 2230, 24925, 28528, 3032, 3308, 41435, 49470, 7522, 1696, 1936, 2232, 24940, 28590, 3033, 3339, 4195, 49612, 8990, 16963, 1957, 2241, 25032, 28591, 3036, 3340, 42340, 4997, 9117, 1699, 1987, 2258, 2516, 28592, 3041, 3341, 4291, 5005, 9747, 1701, 2020, 22591, 2521, 2863, 3045, 33438, 43122, 50218, 9777, 1704, 2040, 2260, 2531, 2864, 30754, 33460, 4352, 5137, 9868, 1714, 2043, 2261, 2532, 2875, 30972, 33719, 43839, 5160, 9919, 11497, 2094, 2200, 2246, 2282, 2297, 2322, 2346, 2375, 2520, 26067, 26677, 26679, 2676, 2730, 2886, 2912, 3010, 31994, 3222, 3337, 34475, 34870, 41041, 46641, 46696, 46815, 46890, 46916, 46978, 46980, 46982, 47001, 47078, 47096, 47113, 47133, 47136, 47138, 47363, 47390, 47413, 47433, 47547, 47548, 47564, 47623, 47656, 47662, 47713, 47714, 47747, 47754, 47787, 47788, 47799, 47836, 47848, 47852, 47866, 47972, 47981, 47983, 47984, 47993, 48009, 48010, 48015, 48016, 48039, 48053, 48090, 48109, 48115, 48120, 48206, 48226, 48247, 48259, 48260, 48274, 48285, 48307, 48326, 48355, 48370, 48395, 48409, 48423, 48449, 48485, 48503, 48506, 48507, 48531, 48631, 48636, 48639, 48687, 48696, 48781, 48796, 49033, 49072, 49086, 49105, 49106, 49115, 49118, 49127, 49128, 49141, 49147, 49172, 49173, 49192, 49193, 49196, 49198, 49222, 49227, 49230, 49241, 49246, 49269, 49294, 49311, 49314, 49316, 49317, 49321, 49466, 49477, 49599, 49630, 49677, 49703, 49804, 49827, 50373, 51466, 52062, 52865, 52973, 53318, 53372, 53421, 53478, 53488, 53521, 53535, 53557, 53646, 53671, 53690, 53698, 53699, 53700, 53701, 53728, 53796, 53851, 53853, 53878, 53891, 53895, 53897, 53915, 53963, 53976, 53996, 54000, 54020, 54021, 54022, 54024, 54026, 54027, 54083, 54085, 54145, 54174, 54215, 54396, 54398, 54452, 54453, 54461, 54511, 55096, 55097, 55149, 55308, 55454, 55864, 56277, 56389, 56398, 7091, 9748, 11497, 2094, 2200, 2246, 2282, 2297, 2322, 2346, 2375, 26067, 26677, 26679, 2676, 2730, 2886, 2912, 3010, 31994, 3222, 3337, 7091, 9748]

class ArtstorListFilter(admin.SimpleListFilter):
    title = 'ARTstor'
    parameter_name = 'artstor'

    def lookups(self, request, model_admin):
        return (
            ('sent', 'already sent'),
            ('not_sent', 'not sent yet'),
        )

    def queryset(self, request, queryset):
        if self.value() == 'sent':
            return queryset.filter(pk__in=ARTWORKS_SENT_TO_ARTSTOR)
        elif self.value() == 'not_sent':
            return queryset.exclude(pk__in=ARTWORKS_SENT_TO_ARTSTOR)

class ArtworkStubAdmin(admin.ModelAdmin):
    search_fields = ['user__email','user__username','user__last_name','user__id','^summary','title','id']
    list_display  = ('title','id','user','created','created_date','completion_percentage','status',
            'needs_repair','location_type','work_type', 'get_location_admin')
    raw_id_fields = ('user',)
    list_filter = ('status', 'needs_repair', 'location_type', 'work_type', ArtstorListFilter)
    date_hierarchy = ('created_date')
    save_on_top= True
    inlines = [ExternalCollectionWorkAdminInline]
    actions = ['approve']

    def approve(modeladmin, request, queryset):
        queryset.update(status='approved')

    def get_urls(self):
        from django.conf.urls.defaults import patterns
        return patterns('',
            (r'^new_submissions/$', self.admin_site.admin_view(self.new_submissions)), 
            (r'^awaiting_approval/$', self.admin_site.admin_view(self.awaiting_approval)), 
            (r'^artstor_csv_dump/$', self.admin_site.admin_view(self.artstor_csv_dump)), 
            (r'^url_inventory/$', self.admin_site.admin_view(self.url_inventory)),         
        ) + super(ArtworkStubAdmin, self).get_urls()
        

    def url_inventory(self, request):
        '''
        creates a csv file compiling the http status of artbase artworks and their urls and locations
        
        '''
        context_instance = RequestContext(request)
        opts = self.model._meta
        admin_site = self.admin_site
        completed_message = None

        writer = csv.writer(open(os.path.join(settings.MEDIA_ROOT, "artbase/data/artbase_broken_urls_inventory_%s.csv" \
            % datetime.date.today(), "wb")))
                
        writer.writerow(['ARTWORK ID', 'ARTWORK TITLE', 'ARTWORK URL', 'URL STATUS', 'LOCATION', 'LOCATION STATUS','UPDATE NOTICE']) 
        all_works = ArtworkStub.objects.filter(status="approved")

        handler = urllib2.UnknownHandler()
        opener = urllib2.build_opener(handler)
        urllib2.install_opener(opener)    
        
        # timeout in seconds
        timeout = 15
        socket.setdefaulttimeout(timeout)
        
        if request.method == "POST":
            if request.POST.get("run_inventory"):
                for work in all_works:   
                    url_response = None
                    url_error_msg = None
                    url_status = None
                    location_response = None
                    location_status = None
                    location_error_msg = None
                    updating_notice = None
            
                    #a few hacks to make sure the url is formatted correctly
                    if "/artbase/" in work.url:
                        if "http://archive.rhizome.org" not in work.url:
                            if "http://" not in work.url:
                                work.url = "http://archive.rhizome.org%s" % work.url
                                updating_notice = "Make sure has full rhizome archives url (http://archive.rhizome.org/....)"
        
                    if "/artbase/" in work.location:
                        if "http://archive.rhizome.org" not in work.location:
                            if "http://" not in work.location:
                                work.location = "http://archive.rhizome.org%s" % work.location
                                updating_notice = "Make sure has full rhizome archives url (http://archive.rhizome.org/....)"
                    if "http://" not in work.url:
                        work.url = "http://%s" % work.url
                        updating_notice = "Make sure has url including 'http://'"
        
                    if "http://" not in work.location:
                        work.location = "http://%s" % work.location
                        updating_notice = "Make sure has url including 'http://'"
                             
                    try:
                        url_response = urllib2.urlopen(work.url, timeout = 15)
                    except (urllib2.URLError, httplib.BadStatusLine, httplib.InvalidURL, httplib.HTTPException,httplib.UnknownProtocol), e:
                        if hasattr(e, 'reason'):
                                if isinstance(e.reason, socket.timeout):
                                    url_error_msg = 'Failed to reach server. TIMED OUT '
                                else:
                                    url_error_msg = 'Failed to reach server. Reason: %s ' % e.reason
                        elif hasattr(e, 'code'):
                            url_error_msg = "The server couldn't fulfill the request. Error code: %s" % e.code
                        else:
                            url_error_msg = "Failed to reach server!"                    
                    except:
                        url_error_msg = "Failed to reach server!"
                          
                    if url_response:
                        url_status = "SUCCESS"
                    else:
                        url_status = url_error_msg
                    
                    
                    if work.location:
                        try:
                            location_response = urllib2.urlopen(work.location, timeout = 15)
                        except (urllib2.URLError, httplib.BadStatusLine, httplib.InvalidURL, \
                                httplib.HTTPException,httplib.UnknownProtocol), e:
                            if hasattr(e, 'reason'):
                                if isinstance(e.reason, socket.timeout):
                                    url_error_msg = 'Failed to reach server. TIMED OUT '
                                else:
                                    location_error_msg = 'Failed to reach a server. Reason: %s ' % e.reason
                            elif hasattr(e, 'code'):
                                location_error_msg = "The server couldn't fulfill the request. Error code: %s" % e.code
                            else:
                                location_error_msg = "Failed to reach server!"
                    
                    if location_response:
                        location_status = "SUCCESS"
                    else:
                        location_status = location_error_msg
                 
                    if location_error_msg or url_error_msg and not updating_notice:
                        updating_notice = "This work has broken links"                 
                    
                    if updating_notice:
                        writer.writerow([    
                            "%s" % work.id,
                            "%s" % work.title,
                            "%s" % work.url,
                            "%s" % url_status,
                            "%s" % work.location,
                            "%s" % location_status,
                            "%s" % updating_notice,
                        ])
                        
                report_email = EmailMessage('ArtBase Broken URLs Inventory Report', 'Report Attached.', settings.ARTBASE_GROUP_EMAIL,
                                            [settings.ARTBASE_GROUP_EMAIL], headers = {'Reply-To': settings.ARTBASE_GROUP_EMAIL})  
                    
                report_email.attach('artbase_broken_urls_inventory_%s.csv' % datetime.date.today(), writer, 'text/csv')
                report_email.send()
                
                completed_message = True
            
        d = {'admin_site': admin_site.name, 
             'title': "Inventory Broken Artwork URLS", 
             'opts': "Artworks", 
             'app_label': opts.app_label,
             "completed_message":completed_message
             }
             
        return render_to_response('admin/artbase/url_inventory.html', d, context_instance)                
    
    def artstor_csv_dump(self, request):
        '''
        creates a csv file dump for sending to artstor
        '''
    
        context_instance = RequestContext(request)
        opts = self.model._meta
        admin_site = self.admin_site
                
        if request.method == "POST":
            response = HttpResponse(mimetype='text/csv')
            response['Content-Disposition'] = 'attachment; filename=artworks_for_artstor_%s.csv' % datetime.date.today()
            writer = csv.writer(response)
            writer.writerow(['ARTIST', 'ARTIST FIRST', 'ARTIST LAST', 'ARTIST EMAIL', '', 
                             'ARTWORK ID', 'TITLE', 'ARTIST', 'CREATED', 'DESCRIPTION',
                             'URL', 'MEDIUM / FORMAT', 'MATERIALS & TECHNOLOGIES',
                             'STATE / EDITION', 'LICENSE','IMAGE',]) 

            # create file from a list
            artworks_list = request.POST.get("artworks")   
            if artworks_list:
                cs_artworks_list = [pk for pk in artworks_list.split(',')]
                artwork_objects = []
                
                for pk in cs_artworks_list:   
                    artwork = ArtworkStub.objects.get(pk = pk)
                    artwork_objects.append(artwork)
                    
                for artwork in artwork_objects:
                    mat_techs = [tech.display_string for tech in artwork.get_technologies()]
                    mat_techs_string = ','.join(mat_techs)
                    row = [
                        '%s' % artwork.byline, 
                        '%s' % artwork.user.first_name,  
                        '%s' % artwork.user.last_name, 
                        '%s' % artwork.user.email, 
                        '%s' % '', 
                        '%s' % artwork.id, 
                        '%s' % artwork.title, 
                        '%s' % artwork.byline, 
                        '%s' % artwork.created_date.strftime("%Y-%m-%d"), 
                        '%s' % artwork.description, 
                        '%s' % artwork.url, 
                        '%s' % artwork.format, 
                        '%s' % mat_techs_string, 
                        '%s' % artwork.state_ed, 
                        '%s' % artwork.license
                    ]
                    writer.writerow([unicode(s).encode("utf-8") for s in row])
            # or dump all
            dump_all = request.POST.get("dump_all_artworks") 
            if dump_all:
                artworks = ArtworkStub.objects.filter(status="approved")
                for artwork in artworks:
                    mat_techs = [tech.display_string for tech in artwork.get_technologies()]
                    mat_techs_string = ','.join(mat_techs)
                    try:
                        writer.writerow([
                            '%s' % artwork.title, 
                            '%s' % artwork.byline, 
                            '%s' % artwork.created_date.strftime("%Y-%m-%d"), 
                            '%s' % artwork.description, 
                            '%s' % artwork.url, 
                            '%s' % artwork.location,
                            '%s' % artwork.format, 
                            '%s' % mat_techs_string, 
                            '%s' % artwork.state_ed, 
                            '%s' % artwork.license, 
                            'http://media.rhizome.org/%s' % artwork.image_large, 
                        ])    
                    except:
                        pass
                        
            return response
        
        d = {'admin_site': admin_site.name, 
             'title': "Dump a CSV file for ArtStor", 
             'opts': "Artworks", 
             'app_label': opts.app_label,
             }
        return render_to_response('admin/artbase/artstor_csv_dump.html', d, context_instance)    

    
    def awaiting_approval(self, request):

        # shows recently submitted artworks and provides means to approve them for artbase
                
        context_instance = RequestContext(request)
        opts = self.model._meta
        admin_site = self.admin_site
        
        awaiting_approval_count = ArtworkStub.objects.filter(status = "to_consider").count()
        artworks_awaiting_approval = ArtworkStub.objects.filter(status = "to_consider").order_by("-submitted_date")
                
        paginator = Paginator(artworks_awaiting_approval, 25)
        
        # Make sure page request is an int. If not, deliver first page.
        try:
            page = int(request.GET.get('page', '1'))
        except ValueError:
            page = 1

        # If page request (9999) is out of range, deliver last page of results.
        try:
            awaiting_approval = paginator.page(page)
        except (EmptyPage, InvalidPage):
            awaiting_approval = paginator.page(paginator.num_pages)
           
        if request.GET.get("artwork") and request.GET.get("choice"):
            workd_id = request.GET.get("artwork")
            choice = request.GET.get("choice")
            new_status = None
                        
            #make sure no junk entered into database via url
            if choice == "approved":
                new_status = "approved"
                artwork = ArtworkStub.objects.get(id = workd_id)
                artwork.status = new_status
                artwork.approved_date = datetime.datetime.now()
                artwork.save()
                
                #add complimetnary
                artwork.user.get_profile().make_complimentary_member()
                
                email = EmailMessage()
                email.subject = "%s has been curated into the Rhizome ArtBase!" % artwork.title
                email.to = [artwork.user.email]
                email.bcc = [settings.ARTBASE_GROUP_EMAIL]
                email.from_email = settings.ARTBASE_GROUP_EMAIL 
                congrats_text = AutoGeneratedEmail.objects.get(email_title = "artbase_congrats_email")
                email.body = """
Dear %s,

Congratulations! Your artwork, "%s", has been accepted to be included in the Rhizome ArtBase, the most comprehensive online archive of new media and Internet art. 

%s
""" % (artwork.user.get_profile(), artwork.title, congrats_text.email_body)
            
                email.send(fail_silently=False)
                return HttpResponseRedirect("%s?page=%s" % (request.path, page))       
            
            if choice =="rejected":
                new_status = "rejected"
                artwork = ArtworkStub.objects.get(id = workd_id)
                artwork.status = new_status
                artwork.save()
                return HttpResponseRedirect("%s?page=%s" % (request.path, page))       
       
        
        d = {'admin_site': admin_site.name, 
             'title': "Artworks Awaiting Final Approval", 
             'opts': "Artworks", 
             'app_label': opts.app_label,
             'awaiting_approval_count':awaiting_approval_count,
             'awaiting_approval':awaiting_approval
             }
        return render_to_response('admin/artbase/awaiting_approval.html', d, context_instance)

    
    def new_submissions(self, request):

        # shows recently submitted artworks and provides means to approve them for artbase
                
        context_instance = RequestContext(request)
        opts = self.model._meta
        admin_site = self.admin_site
        
        new_submissions_count = ArtworkStub.objects.filter(status = "awaiting").count()
        new_submissions = ArtworkStub.objects.filter(status = "awaiting").order_by("-submitted_date")
                
        paginator = Paginator(new_submissions, 25)
        
        # Make sure page request is an int. If not, deliver first page.
        try:
            page = int(request.GET.get('page', '1'))
        except ValueError:
            page = 1
            
        # If page request (9999) is out of range, deliver last page of results.
        try:
            submissions = paginator.page(page)
        except (EmptyPage, InvalidPage):
            submissions = paginator.page(paginator.num_pages)
                
        if request.GET.get("artwork") and request.GET.get("choice"):
            workd_id = request.GET.get("artwork")
            choice = request.GET.get("choice")
            new_status = None
            
            #make sure no junk entered into database via url
            if choice == "to_consider":
                new_status = "to_consider"
                artwork = ArtworkStub.objects.get(id = workd_id)
                artwork.status = new_status
                artwork.save()
                return HttpResponseRedirect("%s?page=%s" % (request.path, page))       
            
            if choice =="rejected":
                new_status = "rejected"
                artwork = ArtworkStub.objects.get(id = workd_id)
                artwork.status = new_status
                artwork.save()
                return HttpResponseRedirect("%s?page=%s" % (request.path, page))       
            
            if choice == "spam":
                artwork = ArtworkStub.objects.get(id = workd_id)
                new_status = "deleted"
                artwork.status = new_status
                artwork.user.get_profile().add_points(-10)
                artwork.save()
                artwork.user.is_active = False
                artwork.user.save()
                users_other_artworks = artwork.user.get_profile().get_entire_portfolio()
                if users_other_artworks:    
                    for work in users_other_artworks:
                        work.status = "deleted"
                        work.save()
                return HttpResponseRedirect("%s?page=%s" % (request.path, page))       
            
        
        d = {'admin_site': admin_site.name, 
             'title': "New Submissions", 
             'opts': "Artworks", 
             'app_label': opts.app_label,
             'new_submissions_count':new_submissions_count,
             'submissions':submissions
             }
        return render_to_response('admin/artbase/new_submissions.html', d, context_instance)

admin.site.register(ArtworkStub, ArtworkStubAdmin)

class FeaturedSetAdmin(admin.ModelAdmin):
    model = FeaturedSet
    raw_id_fields = ("artworks",)
    extra = 1
admin.site.register(FeaturedSet, FeaturedSetAdmin)


class MemberExhibitionAdmin(admin.ModelAdmin):
    search_fields = ['user__email','user__username','user__last_name','user__id','statement','title','id']
    list_display  = ('title','user','created')
    raw_id_fields = ('user',)
    
    model = MemberExhibition
    raw_id_fields = ("user",)
admin.site.register(MemberExhibition, MemberExhibitionAdmin)


class TechnologyAdmin(admin.ModelAdmin):
    model = Technology
    search_fields = ['category', 'type','version',]
    list_display  = ['display_string','category', 'type','version',]

admin.site.register(Technology, TechnologyAdmin)


class WorkTypedmin(admin.ModelAdmin):
    model = WorkType
    search_fields = ['work_type',]
admin.site.register(WorkType, WorkTypedmin)

class CollectionAdmin(admin.ModelAdmin):
    model = Collection
    #search_fields = ['curator__username','curator__first_name','curator__last_name','title',]
    raw_id_fields = ('curator','artworks')
    #list_display  = ('title','curator','time_opened')


admin.site.register(Collection, CollectionAdmin)

class CollectionCuratorAdmin(admin.ModelAdmin):
    model = CollectionCurator
    raw_id_fields = ('user',)

admin.site.register(CollectionCurator, CollectionCuratorAdmin)

admin.site.register(Material)
admin.site.register(License)
admin.site.register(CollectionManagementPolicy)
admin.site.register(ArtistAgreement)
